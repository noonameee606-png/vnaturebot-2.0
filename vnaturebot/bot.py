# bot.py
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –º–æ–¥—É–ª—å)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à .env —Å–æ–¥–µ—Ä–∂–∏—Ç TELEGRAM_BOT_TOKEN (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ Render env var

import os
import time
import asyncio
import logging
import traceback
from collections import defaultdict
from dotenv import load_dotenv

# telegram imports
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ChatJoinRequest,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    ChatJoinRequestHandler,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–ê–ì–†–£–ó–ö–ê .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("vnaturebot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ / –ü–ï–†–ï–ú–ï–ù–ù–´–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not set in environment")

# –ê–¥–º–∏–Ω/ID/–∫–∞–Ω–∞–ª—ã ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏)
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "8384062951"))
REVIEWS_GROUP_ID = int(os.getenv("REVIEWS_GROUP_ID", "-1002826045128"))
MAIN_CHANNEL_ID = int(os.getenv("MAIN_CHANNEL_ID", "-1003211960449"))
PRIVATE_CHANNEL_ID = int(os.getenv("PRIVATE_CHANNEL_ID", "-1003235414978"))

PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK", "https://t.me/+cASc3HVdOb83NzRi")
MAIN_CHANNEL_LINK = os.getenv("MAIN_CHANNEL_LINK", "https://t.me/+cNyLU0-g_CowNDky")
REVIEWS_CHANNEL_LINK = os.getenv("REVIEWS_CHANNEL_LINK", "https://t.me/vnature_reviews")

# Conversation state
REVIEW_TEXT = range(1)

# anti-spam storage (simple)
user_requests = defaultdict(list)

def rate_limit(user_id: int, limit: int = 3, period: int = 60) -> bool:
    now = time.time()
    user_requests[user_id] = [t for t in user_requests[user_id] if now - t < period]
    if len(user_requests[user_id]) >= limit:
        return False
    user_requests[user_id].append(now)
    return True

# ---------- Keyboards ----------
async def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]],
        resize_keyboard=True,
    )

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=text)
    except Exception:
        logger.exception("Failed to notify admin")

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üíé\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ VNATUREBABKI!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await get_main_menu_keyboard(),
        )
    except Exception as e:
        logger.error("Error in start: %s", e)
        await notify_admin(context, f"‚ùå Error in start: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_main_menu_keyboard(),
    )
    return ConversationHandler.END

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user

    if not rate_limit(user.id):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            reply_markup=await get_main_menu_keyboard(),
        )
        return

    if text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await update.message.reply_text(
            "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º! üí¨\n\n"
            "–ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–∏–ª?\n"
            "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
            reply_markup=ReplyKeyboardRemove(),
        )
        return REVIEW_TEXT
    elif text == "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã":
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]])
        await update.message.reply_text(
            "üì¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å:",
            reply_markup=kb,
        )
        # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá",
            reply_markup=await get_main_menu_keyboard(),
        )

async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()

    if len(text) < 10:
        await update.message.reply_text(
            "‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=await get_main_menu_keyboard(),
        )
        return ConversationHandler.END
    if len(text) > 1000:
        await update.message.reply_text(
            "‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=await get_main_menu_keyboard(),
        )
        return ConversationHandler.END

    msg = f"‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ ‚≠ê\n\n–û—Ç: @{user.username or user.first_name} (ID: {user.id})\n\n{text}"

    try:
        await context.bot.send_message(chat_id=REVIEWS_GROUP_ID, text=msg)
        logger.info("Review sent to group")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üí¨\n–ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–≤–æ–π –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π üîç",
            reply_markup=await get_main_menu_keyboard(),
        )
    except Exception as e:
        logger.exception("Error sending review to group: %s", e)
        await notify_admin(context, f"‚ùå Error publishing review:\n{e}\n\n{traceback.format_exc()}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤. –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—Ä—É—á–Ω—É—é.",
            reply_markup=await get_main_menu_keyboard(),
        )
    return ConversationHandler.END

# ---------- Join requests / subscription flow ----------
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request: ChatJoinRequest = update.chat_join_request
    user = request.from_user
    logger.info(f"New join request from {user.id} ({user.username})")

    context.user_data["pending_request"] = {"chat_id": request.chat.id, "user_id": user.id}

    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        f"üíé –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–¢—ã –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª *VNATUREBABKI*.\n\n"
        "–ü–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª üëá"
    )

    try:
        await context.bot.send_message(chat_id=user.id, text=text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.exception("Failed to send join-request message: %s", e)

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    # edit message to show checking
    try:
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
    except Exception:
        pass

    await asyncio.sleep(0.6)

    try:
        member = await context.bot.get_chat_member(PRIVATE_CHANNEL_ID, user.id)
        status = member.status
    except Exception as e:
        logger.exception("Error checking subscription: %s", e)
        try:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass
        return

    if status in ("member", "administrator", "creator"):
        try:
            await query.edit_message_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª! üíéüî•\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëá",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_join")]]),
            )
        except Exception:
            pass
    else:
        try:
            await query.edit_message_text(
                "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=PRIVATE_CHANNEL_LINK)],
                        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")],
                    ]
                ),
            )
        except Exception:
            pass

async def confirm_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    try:
        await query.edit_message_text(
            "–¢—ã —Å–¥–µ–ª–∞–ª –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –∑–∞ –Ω–∞–º–∏!\n"
            "–î–æ–∂–¥–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–º—É, –æ —á—ë–º –¥—Ä—É–≥–∏–µ —Ç–æ–ª—å–∫–æ –º–µ—á—Ç–∞—é—Ç.\n\n"
            "–°–∫–æ—Ä–æ –≤—Å—ë –∏–∑–º–µ–Ω–∏—Ç—Å—è... ü§´üíé"
        )
    except Exception:
        pass

    if "pending_request" in context.user_data:
        data = context.user_data.pop("pending_request")
        chat_id = data["chat_id"]
        user_id = data["user_id"]

        async def approve_later():
            await asyncio.sleep(5)
            try:
                await context.bot.approve_chat_join_request(chat_id, user_id)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üíé –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VNATUREBABKI üéâ\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º üí¨"
                    ),
                    reply_markup=await get_main_menu_keyboard(),
                )
            except Exception as e:
                logger.exception("Error approving join request: %s", e)
                await notify_admin(context, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è approve_later
        context.application.create_task(approve_later())

# ---------- Other helpers ----------
async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", url=REVIEWS_CHANNEL_LINK)]])
    await update.message.reply_text(
        "üì¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å:",
        reply_markup=kb,
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üíé VNATUREBABKI ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç\n\n"
        f"üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL_LINK}\n"
        f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {PRIVATE_CHANNEL_LINK}\n"
        f"‚≠ê –û—Ç–∑—ã–≤—ã: {REVIEWS_CHANNEL_LINK}\n\n"
        f"üì© –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @CreatorVnaturebabki",
        reply_markup=await get_main_menu_keyboard(),
    )

# ---------- MAIN ----------
def main() -> None:
    logger.info("Initializing VNATUREBOT...")

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), handle_main_menu)],
        states={
            REVIEW_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review),
                CommandHandler("cancel", cancel),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # add handlers
    application.add_handler(conv_handler)
    application.add_handler(ChatJoinRequestHandler(handle_join_request))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="^check_sub$"))
    application.add_handler(CallbackQueryHandler(confirm_join, pattern="^confirm_join$"))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))

    async def after_startup(app: Application):
        logger.info("VNATUREBOT started")
        try:
            await app.bot.send_message(chat_id=ADMIN_USER_ID, text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception:
            logger.debug("Failed to notify admin on startup", exc_info=True)

    application.post_init = after_startup

    logger.info("Starting polling loop")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True, close_loop=False)
    except Exception as e:
        logger.exception("Critical error in polling: %s", e)
        time.sleep(30)
        main()

if __name__ == "__main__":
    main()